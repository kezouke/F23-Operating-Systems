**Experiment Description:**

In my experiment, I explore the intricate interplay between memory usage, page faults, and swapping for efficient memory management. I achieve this by developing a program that sequentially allocates 10 MB of memory in each iteration and zeros it using the `memset` function. As the program runs, memory usage gradually increases, leading to a rise in minor page faults, while major page faults remain at 0. The "si" and "so" values in the `vmstat` output, which indicate memory swapped in from and out to the disk, remain 0 initially, reflecting ample available memory. However, the "free" memory decreases as the program allocates memory, potentially impacting concurrent processes on the system.

**Another Scenario:**

Now, consider an another twist to the experiment.  In this scenario, as memory usage escalates to 350 MB per second. While the minor page faults continue to rise due to the growing memory usage, major page faults remain consistently low. The "si" and "so" values stay close to 0 (but sometimes > 0!), suggesting minimal disk swapping.
